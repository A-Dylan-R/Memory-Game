//objet selectors pour stocker les variables
const selectors = {
    boardcontainer: document.querySelector(".board_container"),
    board: document.querySelector(".board"),
    moves: document.querySelector(".moves"),
    timer: document.querySelector(".timer"),
    start: document.querySelector("button"),
    win: document.querySelector(".win")
};

//Etat initial du jeu
const state = {
    gameStarted: false, //permet de savoir si le jeu a commencer ou pas
    flippedCards: 0,
    totalFlips: 0,
    totalTime: 0,
    loop: null
};

// Cette fonction prend un tableau en entrÃ©e et renvoie un nouveau tableau contenant les mÃªmes Ã©lÃ©ments, mais dans un ordre alÃ©atoire.
const shuffle = array => {
    // Cloner le tableau d'entrÃ©e
    const clonnedArray = [...array];

    // ItÃ©rer sur chaque Ã©lÃ©ment du tableau, Ã  partir du dernier jusqu'au deuxiÃ¨me Ã©lÃ©ment
    for (let i = clonnedArray.length - 1; i > 0; i--) {
        // GÃ©nÃ©rer un index alÃ©atoire entre 0 et i inclusivement
        const randomIndex = Math.floor(Math.random() * (i + 1));
        // Stocker temporairement l'Ã©lÃ©ment Ã  la position i
        const original = clonnedArray[i];

        // Remplacer l'Ã©lÃ©ment Ã  la position i par l'Ã©lÃ©ment Ã  l'index alÃ©atoire
        clonnedArray[i] = clonnedArray[randomIndex];
        // DÃ©placer l'Ã©lÃ©ment temporaire Ã  la position de l'index alÃ©atoire
        clonnedArray[randomIndex] = original;
    }
    return clonnedArray;
}


// Cette fonction prend un tableau en entrÃ©e et renvoie un tableau contenant un nombre donnÃ© d'Ã©lÃ©ments choisis au hasard Ã  partir du tableau d'entrÃ©e.
// Le deuxiÃ¨me argument est le nombre d'Ã©lÃ©ments Ã  retourner.
const pickRandom = (array, items) => {
    // Cloner le tableau d'entrÃ©e pour Ã©viter de le modifier
    const clonnedArray = [...array];
    // Initialiser un tableau vide pour stocker les Ã©lÃ©ments choisis au hasard
    const randomPicks = [];

    // RÃ©pÃ©ter le nombre de fois donnÃ© dans l'argument "items"
    for (let i = 0; i < items; i++) {
        // GÃ©nÃ©rer un index alÃ©atoire entre 0 et la longueur du tableau clonÃ©
        const randomIndex = Math.floor(Math.random() * clonnedArray.length);

        // Ajouter l'Ã©lÃ©ment correspondant Ã  l'index alÃ©atoire dans le tableau "randomPicks"
        randomPicks.push(clonnedArray[randomIndex]);
        // Supprimer l'Ã©lÃ©ment ajoutÃ© du tableau clonÃ© pour Ã©viter de le sÃ©lectionner Ã  nouveau
        clonnedArray.splice(randomIndex, 1);
    }
    return randomPicks;
}


// Cette fonction gÃ©nÃ¨re un jeu de mÃ©moire et renvoie une chaÃ®ne de caractÃ¨res HTML reprÃ©sentant le tableau de jeu.
const generateGame = () => {
    // Obtenir les dimensions du tableau de jeu Ã  partir de l'attribut "data-dimension" de l'Ã©lÃ©ment "board" sÃ©lectionnÃ©
    const dimensions = selectors.board.getAttribute('data-dimension');

    // VÃ©rifier si les dimensions sont un nombre pair, sinon lancer une erreur
    if (dimensions % 2 !== 0) {
        throw new Error("Les dimensions du tableau doivent Ãªtre un nombre pair.")
    }

    // Initialiser un tableau contenant les emojis Ã  utiliser pour le jeu
    const emojis = ['ğŸ¤£', 'ğŸ˜­', 'ğŸ˜‚', 'ğŸ’€', 'ğŸ¥º', 'ğŸ˜Œ', 'ğŸ˜†', 'ğŸ¤”', 'ğŸ¥°', 'ğŸ˜’'];
    // SÃ©lectionner un nombre d'Ã©lÃ©ments au hasard Ã  partir du tableau "emojis", en utilisant la fonction "pickRandom"
    const picks = pickRandom(emojis, (dimensions * dimensions) / 2);
    // ConcatÃ©ner le tableau de "picks" avec lui-mÃªme pour crÃ©er deux exemplaires de chaque Ã©lÃ©ment, puis mÃ©langer les Ã©lÃ©ments en utilisant la fonction "shuffle"
    const items = shuffle([...picks, ...picks]);
    // CrÃ©er une chaÃ®ne de caractÃ¨res HTML reprÃ©sentant le tableau de jeu en utilisant les Ã©lÃ©ments mÃ©langÃ©s
    const cards = `
    <div class="board" style="grid-template-columns: repeat(${dimensions}, auto)">
        ${items.map(item => `
            <div class="card">
                <div class="card-front"></div>
                <div class="card-back">${item}</div>
            </div>
        `).join('')}
    </div>
`;
    // Renvoyer la chaÃ®ne de caractÃ¨res HTML reprÃ©sentant le tableau de jeu
    return cards;
}



const parser = new DOMParser().parseFromString(cards, 'text/html');
selectors.board.replaceWith(parser.querySelector('.board'));

// DÃ©marre le jeu et met Ã  jour l'Ã©tat du jeu
const startGame = () => {
    // DÃ©finir l'Ã©tat du jeu comme Ã©tant commencÃ©
    state.gameStarted = true;
    // Ajouter la classe "disabled" au bouton de dÃ©marrage pour le dÃ©sactiver
    selectors.start.classList.add('disabled');

    // Mettre Ã  jour l'Ã©tat du temps toutes les secondes en utilisant setInterval
    state.loop = setInterval(() => {
        // IncrÃ©menter le temps total
        state.totalTime++;
        // Mettre Ã  jour l'affichage du nombre de mouvements et du temps total
        selectors.moves.innerText = `${state.totalFlips} moves`
        selectors.timer.innerText = `Time : ${state.totalTime} sec`
    }, 1000)
}

// Retourne toutes les cartes qui ne sont pas des paires correspondantes aprÃ¨s un certain dÃ©lai
const flipBackCards = () => {
    // Utiliser setTimeout pour attendre un certain dÃ©lai avant de retourner les cartes
    setTimeout(() => {
        // Parcourir toutes les cartes qui ne sont pas encore retournÃ©es en enlevant la classe "flipped"
        document.querySelectorAll('.card:not(.matched)').forEach(card => {
            card.classList.remove('flipped');
        });
        // RÃ©initialiser le nombre de cartes retournÃ©es
        state.flippedCards = 0;
    }, 2500);
}


const flipCard = card => {
    // IncrÃ©menter le nombre de cartes retournÃ©es et le nombre total de flips
    state.flippedCards++;
    state.totalFlips++;

    // DÃ©marrer le jeu s'il n'a pas encore commencÃ©
    if (!state.gameStarted) {
        startGame();
    }
    // Retourner la carte si le nombre de cartes retournÃ©es est infÃ©rieur ou Ã©gal Ã  2
    if (state.flippedCards <= 2) {
        card.classList.add('flipped')
    }
    // VÃ©rifier si deux cartes ont Ã©tÃ© retournÃ©es et si elles sont identiques
    if (state.flippedCards === 2) {
        const flippedCards = document.querySelectorAll('.flipped:not(.matched)');
        if (flippedCards[0].innerText === flippedCards[1].innerText) {
            // Ajouter la classe 'matched' aux cartes si elles sont identiques
            flippedCards[0].classList.add('matched');
            flippedCards[1].classList.add('matched');
        }
        // Retourner les cartes s'il n'y a pas de correspondance
        setTimeout(() => {
            flipBackCards()
        }, 1000)
    }
    // VÃ©rifier si toutes les cartes ont Ã©tÃ© retournÃ©es
    if (!document.querySelectorAll('.card:not(flipped)').length) {
        // Annoncer la victoire et afficher le nombre total de flips et le temps Ã©coulÃ©
        setTimeout(() => {
            selectors.boardcontainer.classList.add('flipped')
            selectors.win.innerHTML = ` <span class="win-text"> You won! <br/> With  <span class="highlight">${state.totalFlips}</span> moves <br/> under <span class"highlight">${state.totalTime}</span></span>`
            clearInterval(state.loop)
        }, 1000)
    }
}

const attachEventListeners = () => {
    document.addEventListener('click', event => {
        const eventTarget = event.target;
        const eventParent = eventTarget.parentElement;

        if (eventTarget.className.includes('card') && !eventParent.className.includes('flipped')) {
            flipCard(eventParent)
        } else if (eventTarget.nodeName === 'BUTTON' && !eventTarget.className.includes('disabled')) {
            startGame();
        }
    })
}

generateGame();
attachEventListeners();